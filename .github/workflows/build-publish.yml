name: "JFrog Integration Example"
on: push

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v2
      env:  
        JF_URL: ${{ secrets.JF_URL }}
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v2

    - name: Install npm dependencies
      run: npm install

    - name: Run Tests
      run: npm test

    - name: Build package
      run: npm pack

    - name: Get version
      id: get_version
      run: echo "::set-output name=VERSION::$(node -p "require('./package.json').version")"
      shell: bash

    - name: Check if artifact already exists in Artifactory
      id: check_artifact
      run: |
        $output = jf rt s "demo-npm/frog-utils-${{ steps.get_version.outputs.VERSION }}.tgz"
        echo "Output of the search command: $output"
        if (!($output | Select-String -Pattern 'Found 0 artifacts')) {
          echo "Artifact does not exist in Artifactory."
          echo "exists=false" >> $GITHUB_ENV
          echo "::set-output name=exists::false"
        } else {
          echo "Given Artifact exists in Artifactory."
          echo "exists=true" >> $GITHUB_ENV
          echo "::set-output name=exists::true"
        }
      shell: pwsh

    - name: Publish Artifact
      run: |
        echo "Exists value: ${{ steps.check_artifact.outputs.exists }}"
        if ("${{ steps.check_artifact.outputs.exists }}" -eq "false") {
          jf rt u "./frog-utils-${{ steps.get_version.outputs.VERSION }}.tgz" demo-npm --build-name=$GITHUB_RUN_ID --build-number=$GITHUB_RUN_NUMBER
          Write-Output "Artifact successfully uploaded to Artifactory."
        } else {
          Write-Output "This version of artifact already present, no need to upload."
        }
      shell: pwsh
